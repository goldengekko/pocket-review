package com.wadpam.rnr.datastore;

import com.google.appengine.api.NamespaceManager;
import com.google.appengine.api.datastore.*;
import com.google.appengine.api.memcache.MemcacheService;
import com.google.appengine.api.memcache.MemcacheServiceFactory;
import com.wadpam.rnr.dao.DAppSettingsDao;
import com.wadpam.rnr.dao.DFavoritesDao;
import com.wadpam.rnr.dao.DProductDao;
import com.wadpam.rnr.domain.DAppSettings;
import com.wadpam.rnr.domain.DFavorites;
import com.wadpam.rnr.domain.DProduct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

public class PersistenceManager {

    static final Logger LOG = LoggerFactory.getLogger(PersistenceManager.class);

    static final String PROD_PREFIX = "prod-";
    static final String FAV_PREFIX = "fav-";
    static final String App_PREFIX = "app-";

    private DProductDao productDao;
    private DFavoritesDao favoritesDao;
    private DAppSettingsDao appSettingsDao;

    // Get a page of products using pagination
    // TODO: This method should be generated by Mardao and be supported by most methods
    public String getProductPage(String cursor, int pageSize, Collection<DProduct> productPage) {

        DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
        Query query = new Query("DProduct");
        PreparedQuery preparedQuery = datastore.prepare(query);

        // Set fetch options
        FetchOptions fetchOptions = FetchOptions.Builder.withLimit(pageSize);
        if (null != cursor)
            fetchOptions.startCursor(Cursor.fromWebSafeString(cursor));

        // Run the query
        QueryResultList<Entity> entities = preparedQuery.asQueryResultList(fetchOptions);

        // Build the DProduct domain object from the entities
        for (Entity entity : entities) {
            DProduct dProduct = new DProduct();

            LOG.debug("Entity key name: " + entity.getKey().getName());
            dProduct.setProductId( entity.getKey().getName());
            dProduct.setRatingSum((Long)entity.getProperty("ratingSum"));
            dProduct.setRatingCount((Long)entity.getProperty("ratingCount"));
            dProduct.setLikeCount((Long)entity.getProperty("likeCount"));
            dProduct.setCommentCount((Long)entity.getProperty("commentCount"));
            dProduct.setLocation((GeoPt) entity.getProperty("location"));

            productPage.add(dProduct);
        }

        // Get a new cursor
        String newCursor = entities.getCursor().toWebSafeString();

        return newCursor;
    }


    /* Cache related methods*/

    // TODO: I think several of this methods should be able to be autogenerated my Mardao. Support a cached version of DB methods
    // Get product from the cache or the db
    public DProduct getProductWithCache(String productId) {
        MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();

        // Generate unique key
        Key key = productDao.createKey(productId);

        // Look for the product in the cache
        DProduct dProduct = (DProduct)memcache.get(key);

        if (null == dProduct) {
            // Not found in the cache, read from the db
            dProduct = productDao.findByCorePrimaryKey(key);

            // Update the cache if found
            if (null != dProduct)
                memcache.put(key, dProduct);
        }

        return dProduct;
    }

    // Get products from the cache or the db
    public Collection<DProduct> getProductsWithCache(Collection<String> productIds) {
        MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();

        if (null == productIds) return new ArrayList<DProduct>();

        // Generate keys
        Collection<Key> allKeys = new ArrayList<Key>(productIds.size());
        for (String prductIds : productIds)
            allKeys.add(productDao.createKey(prductIds));

        // Look for the products in the cache
        Map<Key, DProduct> cachedProducts = (Map<Key, DProduct>)(Object)memcache.getAll(allKeys); // TODO: Is there a better way to cast?

        // Find all product ids missing from the cache
        Collection<Key> missingKeys =  new ArrayList<Key>(allKeys);
        missingKeys.removeAll(cachedProducts.keySet());

        // Get the remaining products that was not in the cache from the db
        Map<Key, DProduct> missingProducts = null;
        if (!missingKeys.isEmpty()) {

            missingProducts = productDao.findByCorePrimaryKeys(missingKeys);

            // Update cache with missing products
            memcache.putAll(missingProducts);
        }

        // Combine the cached and missing products
        if (null != missingProducts)
            cachedProducts.putAll(missingProducts);

        return cachedProducts.values();
    }

    // Update the product and the cache if it already contains the product
    public void storeProductWithCache(DProduct dProduct) {
        MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();

        // Generate unique key
        Key key = productDao.createKey(dProduct.getSimpleKey());

        // Update the cache only if it exists in the cache
        // We do not like to populate the cache with rare products that is never requested
        if (memcache.contains(key)) {
            memcache.put(key, dProduct);
        }

        // Store in datastore
        productDao.persist(dProduct);
    }


    // Get favorites from the cache or db
    public DFavorites getFavoritesWithCache(String username) {
        MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();

        // Generate unique key
        Key key = favoritesDao.createKey(username);

        // Look for the product in the cache
        DFavorites dFavorites = (DFavorites)memcache.get(key);

        if (null == dFavorites) {
            // Not found in the cache, read from the db
            dFavorites = favoritesDao.findByCorePrimaryKey(key);

            // Update the cache if found
            if (null != dFavorites)
                memcache.put(key, dFavorites);
        }

        return dFavorites;
    }

    // Update the favorite and the cache
    public void storeFavoriteWithCache(DFavorites dFavorites) {
        MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();

        // Generate unique key
        Key key = favoritesDao.createKey(dFavorites.getSimpleKey());

        // Update the cache always
        memcache.put(key, dFavorites);

        // Store in the db
        favoritesDao.persist(dFavorites);
    }


    // Store app settings in the cache and db
    public void storeAppSettingsWithCache(DAppSettings dAppSettings) {
        MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();

        // Generate unique key
        Key key = appSettingsDao.createKey(dAppSettings.getSimpleKey());

        // Update cache
        memcache.put(key, dAppSettings);

        // Store in datastore
        appSettingsDao.persist(dAppSettings);
    }

    // Delete app setting and update the cache
    public void deleteAppSettingsWithCache(DAppSettings dAppSettings) {
        MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();

        // Generate unique key
        Key key = appSettingsDao.createKey(dAppSettings.getSimpleKey());

        // Clear cache
        memcache.delete(key);

        // Delete from datastore
        appSettingsDao.deleteByCore(key);
    }

    public DAppSettings getAppSettingsWithCache(String domain) {
        MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();

        // Generate unique key
        Key key = appSettingsDao.createKey(domain);

        // Get from the cache
        DAppSettings dAppSettings = (DAppSettings)memcache.get(key);
        if (null == dAppSettings) {
            // Read from the datastore
            dAppSettings = appSettingsDao.findByCorePrimaryKey(key);

            // Store in datastore if found
            if (null != dAppSettings)
                memcache.put(key, dAppSettings);
        }

        return dAppSettings;
    }

    // Setters and Getters
    public void setProductDao(DProductDao productDao) {
        this.productDao = productDao;
    }

    public void setFavoritesDao(DFavoritesDao favoritesDao) {
        this.favoritesDao = favoritesDao;
    }

    public void setAppSettingsDao(DAppSettingsDao appSettingsDao) {
        this.appSettingsDao = appSettingsDao;
    }
}