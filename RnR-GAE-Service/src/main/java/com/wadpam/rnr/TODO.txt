
Ola
// TODO: Add geolocation to DProduct (Ola)
// TODO: Implement nearby search methods with sort order (Ola)
// TODO: Move location to a separate entity? Ola? Do not think it is necessary. Will we ever have anything else then the location on this entity

// TODO: I removed several things from the web.xml and spring-security.xml to understand how it works. Add back stuff that is needed as we add security

// TODO: Use session in backoffice security (better performance) - Ola, I guess we should not have session on backoffice users. They are authenticated outside the system.

// TODO: Merge branch to master after Olas reviewed and approved changed.

// TODO: There is a bug in Mardao with caching.


Current

// TODO: Create email text using velocity templates instead?

// TODO: Add a common exception handler that translate into HTTP response codes

// TODO: Simple backoffice interface (sigin, get all registered apps, new, delete, update)


The backoffice will work like this:
-The user signs in with gmail account
-If it is a new user a new DApplicationAdmin will be create
    -State will be set to pending
    -An email will be sent to X telling there is a pending user
    -The new user will get a screen telling them to wait for approval
-A GAE project admin logs in and browse all pending users
    -Admin can approve, this will send an email to the pending user
    -admin can Suspend and Delete (users can no longer access the app admin page, will the app still work for the service?)
-The new approved user login and will see a list of all their registered app domains (DAppDomain)
-The user can select to:
    -Create a new domain. Must be unique and will be stored in DAppDomain
    -Select and existing app domain and be taken to the Application settings (stored in DApplication)

The DAppDomain and DAppAdmin will reside in a special namespace the same for all applications (in order to access all data at the same time)
The DAppSettings will reside under each domains namespace (will thus only be one per domain)



DONE

// TODO: Implement Olas comments
// TODO: Rename Result to Product?
// TODO: Migrate all product requests to ProductController
// TODO: Make a RatingV11Controller + ResultV11 , retain backwards compatibility
// TODO: Add sort order parameter to getNearbyProduct
// TODO: Add cache to Products. Where?
// TODO: Implement all Like methods
// TODO: Implement all rating methods
// TODO: Support review comments (think about how this should work 1) together with ratings or as something separate)
// TODO: Add ids in JRating, JLike and JProduct
// TODO: Support pagination
// TODO: Move the convert from D-objects to J-objects to Controllers?  Ola?
// TODO: Add links in the return JSON to make it REST.
// TODO: Support comments
// TODO: Create and update methods should redirect to the get
// TODO: Rebase from master branch
// TODO: Maven move classes.class to settings.xml (using profiles instead)
// TODO: Review returning 404. When to do it?
// TODO: Return distance in nearby requests
// TODO: Move get all ratings/likes/comments for a product to the respective controller (away from the product controller) - NO. Not able for find a good REST URL for this.
// TODO: Support favorites
// TODO: Favorites memcache (check in multitenancy and tags fo different type of data). Also check when getting products

// TODO: Moved the instantiation of the "old" rating controller to the backend spring context, will default not be started, only if the backend need to be backwards compatible.
// TODO: Add average rating to DB as a property
// TODO: Add datastore indexes (I deleted the one that existed and added new). How do I ask for most liked DProduct using Mardao? I can not find any methods.
// TODO: The Rating15Controller have issues with the namespace. Probably due to the versioning and the DomainFilter
// TODO: Move version further back, start with v11
// TODO: Implement the "most" operations
// TODO: Remove support for Old RatingController, changes are so big it is not possible to maintain backwards compatibility
// TODO: Updating the product counters are not thread safe. Nor is the creating of new entities. Can we wrap them in a transaction?
// TODO: Configure in Spring context as transaction or just grab

// TODO: Better way to get the base URL when generating URLs, try the servlet context - NO, looks ok as is

// TODO: Add DAppSettings with controller
// TODO: Add support for memcache for app settings
// TODO: Best way to generate the key for the memcache (namespace switching or getting the key frm the DB)
// TODO: Add reading from the DAppSettings for some values (rate more then once)

// TODO: Add security (basic authentication) for app rest methods
// TODO: Split Spring security in a backend and service part?
// TODO: How to know and indicate end of pagination? When less then the requested number is returned.

// TODO: Add DAppAdmin and controller (domain admin)
// TODO: Implement sending email

// TODO: Maybe the GAE entry point should give 403 in all cases and the web app need to run login? No, keep in redirecting to Google login, no 403
// TODO: Handle pending users (give them special role or how to handle it)?
// TODO: Go over REST methods and rename + domain objects (AppSettings -> App)
// TODO: Change to /admin/appSettings and take domain as parameter instead. All methods with the same security should be behind the special domain admin
// TODO: Reserve the admin domain, make sure no such domain can be created. Change name to "backoffice"?
// TODO: Add DApp and controller. Same as AppSettings
// TODO: Add security to the backoffice
// TODO: Delete DAppAdmin
// TODO: Max Apps for a AppAdmin
// TODO: Added owner to Dapp
// TODO: api/{version}/backoffice/app/my (GET)
// TODO: api/{version}/backoffice/app/all (GET)
// TODO: Move any Spring security to the controller, never service layer
// TODO: 403 vs 401? When to use what? Use 401 when the user is not allowed to access due to credentials. 403 when the user is not allowed, regardless of credentials.
// TODO: Let the controller check if the user is the owner of an app
// TODO: How and where do we control what apps an admin can access? In the security layer or service layer?
// TODO: Update to new version of Mardao (refactor caching)
// TODO: caching of DAppAdmin, no need after updating Mardao. Refactor
// TODO: Turn basic authentication on and off per project. More important no app should be needed, use a dummy app. Use Spring anonymous
// TODO: Create a UserDetails subclass that can also hold the Googer User object. Only you Spring security to get user details. Never GAE.







REST end-points

api/{version}/{domain}/monitor (GET)                    Get all products                            X  OK  Y

api/{version}/{domain}/product (POST)                   Get all products                            X  OK  Y (should be migrated to Mardao)
api/{version}/{domain}/product/{product} (GET)          Get one product                             X  OK  Y
api/{version}/{domain}/product?ids= GET                 Get several products                        X  OK  Y
api/{version}/{domain}/product/nearby (POST)            Get products nearby
api/{version}/{domain}/product/mostliked (GET)          Get most liked products                     X  OK
api/{version}/{domain}/product/mostcommented (GET)      Get most commented                          X  OK
api/{version}/{domain}/product/mostrated (GET)          Get most rated                              X  OK
api/{version}/{domain}/product/toprated (GET)           Get top rated products                      X  OK
api/{version}/{domain}/product/my/liked (GET)           Get all products I have liked               X  OK  Y
api/{version}/{domain}/product/my/rated (GET)           Get all products I have rated               X  OK  Y
api/{version}/{domain}/product/my/commented (GET)       Get all products I have commented           X  OK  Y
api/{version}/{domain}/product/my/favorites (GET)       Get all favorites products                  X  OK  Y


api/{version}/{domain}/like (POST)                      Like a product                              X  OK  Y
api/{version}/{domain}/like/{id} (GET)                  Get like details                            X  OK  Y
api/{version}/{domain}/like/{id} (DELETE)               Delete a like                               X  OK  Y
api/{version}/{domain}/like?username= (GET)             Get my likes                                X  OK  Y
api/{version}/{domain}/like?productId= (GET)            Get all likes for product                   X  OK  Y


api/{version}/{domain}/rating (POST)                    Rate a product                              X  OK  Y
api/{version}/{domain}/rating/{id} (GET)                Get rating details                          X  OK  Y
api/{version}/{domain}/rating/{id} (DELETE)             Delete a rating                             X  OK  Y
api/{version}/{domain}/rating?username= (GET)           Get my ratings                              X  OK  Y
api/{version}/{domain}/rating?productId= (GET)          Get all ratings for product                 X  OK  Y



api/{version}/{domain}/comment (POST)                    Comment a product                          x  OK  Y
api/{version}/{domain}/comment/{id} (GET)                Get Comment details                        x  OK  Y
api/{version}/{domain}/comment/{id} (DELETE)             Delete a Comment                           x  OK  Y
api/{version}/{domain}/comment?username= (GET)           Get my Comments                            x  OK  Y
api/{version}/{domain}/comment?productId= (GET)          Get all Comments for product               X  OK  Y


api/{version}/{domain}/favorites/{username} (PUT)                   Make a product a favorite                  X  X
api/{version}/{domain}/favorites/{username} (GET)                   Get get all favorites                      X  X
api/{version}/{domain}/favorites/{username}?productId= (DELETE)     Delete a favorite product for user         X  X


api/{version}/backoffice/user/login (GET)                 login a backoffice user with Google
api/{version}/backoffice/user/logout (GET)                logout a backoffice user with Google

api/{version}/backoffice/user (POST)                            Create a new pending backoffice user account
api/{version}/backoffice/user (GET)                             Get backoffice user account details
api/{version}/backoffice/user/{userId} (GET)                    Get backoffice user account details (only GAE admins)
api/{version}/backoffice/user/all (GET)                         Get all backoffice user account details (only GAE admins)
api/{version}/backoffice/user/{userId}/status/{status) (POST)   Update the account status (only GAE admins)

Delete?

api/{version}/backoffice/app/{domain} (POST)                    Create a new app for domain
api/{version}/backoffice/app/{domain} (GET)                     Get app for domain
api/{version}/backoffice/app/{domain} (DELETE)                  Delete app for domain
api/{version}/backoffice/app/{domain}/appKey (DELETE)           Generate a new appKey

api/{version}/backoffice/app/my (GET)                           Get all apps owned for the current user
api/{version}/backoffice/app/all (GET)                          Get all apps in the system (only GAE admins)












