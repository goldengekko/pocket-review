
Ola
// TODO: Add geolocation to DProduct (Ola)
// TODO: Implement nearby search methods with sort order (Ola)
// TODO: Move location to a separate entity? Ola? Do not think it is necessary. Will we ever have anything else then the location on this entity






// TODO: How to know and indicate end of pagination?

// TODO: Merge branch to master after Olas reviewed and approved changed.

// TODO: Add DAppSettings with controller
// TODO: Add reading from the DAppSettings for some values (rate more then once)

// TODO: Add security (basic authentication) for app rest methods

// TODO: Add DAppAdmin and controller (domain admin)

// TODO: Add DApp and controller

// TODO: Simple backoffice interface (sigin, get all registered apps, new, delete, update)

// TODO: Add security to the backoffice



The backoffice will work like this:
-The user signs in with gmail account
-If it is a new user a new DApplicationAdmin will be create
    -State will be set to pending
    -An email will be sent to X telling there is a pending user
    -The new user will get a screen telling them to wait for approval
-A GAE project admin logs in and browse all pending users
    -Admin can approve, this will send an email to the pending user
    -admin can Suspend and Delete (users can no longer access the app admin page, will the app still work for the service?)
-The new approved user login and will see a list of all their registered app domains (DAppDomain)
-The user can select to:
    -Create a new domain. Must be unique and will be stored in DAppDomain
    -Select and existing app domain and be taken to the Application settings (stored in DApplication)

The DAppDomain and DAppAdmin will reside in a special namespace the same for all applications (in order to access all data at the same time)
The DAppSettings will reside under each domains namespace (will thus only be one per domain)






DONE

// TODO: Implement Olas comments
// TODO: Rename Result to Product?
// TODO: Migrate all product requests to ProductController
// TODO: Make a RatingV11Controller + ResultV11 , retain backwards compatibility
// TODO: Add sort order parameter to getNearbyProduct
// TODO: Add cache to Products. Where?
// TODO: Implement all Like methods
// TODO: Implement all rating methods
// TODO: Support review comments (think about how this should work 1) together with ratings or as something separate)
// TODO: Add ids in JRating, JLike and JProduct
// TODO: Support pagination
// TODO: Move the convert from D-objects to J-objects to Controllers?  Ola?
// TODO: Add links in the return JSON to make it REST.
// TODO: Support comments
// TODO: Create and update methods should redirect to the get
// TODO: Rebase from master branch
// TODO: Maven move classes.class to settings.xml (using profiles instead)
// TODO: Review returning 404. When to do it?
// TODO: Return distance in nearby requests
// TODO: Move get all ratings/likes/comments for a product to the respective controller (away from the product controller) - NO. Not able for find a good REST URL for this.
// TODO: Support favorites
// TODO: Favorites memcache (check in multitenancy and tags fo different type of data). Also check when getting products

// TODO: Moved the instantiation of the "old" rating controller to the backend spring context, will default not be started, only if the backend need to be backwards compatible.
// TODO: Add average rating to DB as a property
// TODO: Add datastore indexes (I deleted the one that existed and added new). How do I ask for most liked DProduct using Mardao? I can not find any methods.
// TODO: The Rating15Controller have issues with the namespace. Probably due to the versioning and the DomainFilter
// TODO: Move version further back, start with v11
// TODO: Implement the "most" operations
// TODO: Remove support for Old RatingController, changes are so big it is not possible to maintain backwards compatibility
// TODO: Updating the product counters are not thread safe. Nor is the creating of new entities. Can we wrap them in a transaction?
// TODO: Configure in Spring context as transaction or just grab


// TODO: Better way to get the base URL when generating URLs, try the servlet context - NO, looks ok as is







REST end-points

api/{version}/{domain}/monitor (GET)                    Get all products                            X  OK  Y

api/{version}/{domain}/product (POST)                   Get all products                            X  OK  Y (should be migrated to Mardao)
api/{version}/{domain}/product/{product} (GET)          Get one product                             X  OK  Y
api/{version}/{domain}/product?ids= GET                 Get several products                        X  OK  Y
api/{version}/{domain}/product/nearby (POST)            Get products nearby
api/{version}/{domain}/product/mostliked (GET)          Get most liked products                     X  OK
api/{version}/{domain}/product/mostcommented (GET)      Get most commented                          X  OK
api/{version}/{domain}/product/mostrated (GET)          Get most rated                              X  OK
api/{version}/{domain}/product/toprated (GET)           Get top rated products                      X  OK
api/{version}/{domain}/product/my/liked (GET)           Get all products I have liked               X  OK  Y
api/{version}/{domain}/product/my/rated (GET)           Get all products I have rated               X  OK  Y
api/{version}/{domain}/product/my/commented (GET)       Get all products I have commented           X  OK  Y
api/{version}/{domain}/product/my/favorites (GET)       Get all favorites products                  X  OK  Y


api/{version}/{domain}/like (POST)                      Like a product                              X  OK  Y
api/{version}/{domain}/like/{id} (GET)                  Get like details                            X  OK  Y
api/{version}/{domain}/like/{id} (DELETE)               Delete a like                               X  OK  Y
api/{version}/{domain}/like?username= (GET)             Get my likes                                X  OK  Y
api/{version}/{domain}/like?productId= (GET)            Get all likes for product                   X  OK  Y


api/{version}/{domain}/rating (POST)                    Rate a product                              X  OK  Y
api/{version}/{domain}/rating/{id} (GET)                Get rating details                          X  OK  Y
api/{version}/{domain}/rating/{id} (DELETE)             Delete a rating                             X  OK  Y
api/{version}/{domain}/rating?username= (GET)           Get my ratings                              X  OK  Y
api/{version}/{domain}/rating?productId= (GET)          Get all ratings for product                 X  OK  Y



api/{version}/{domain}/comment (POST)                    Comment a product                          x  OK  Y
api/{version}/{domain}/comment/{id} (GET)                Get Comment details                        x  OK  Y
api/{version}/{domain}/comment/{id} (DELETE)             Delete a Comment                           x  OK  Y
api/{version}/{domain}/comment?username= (GET)           Get my Comments                            x  OK  Y
api/{version}/{domain}/comment?productId= (GET)          Get all Comments for product               X  OK  Y


api/{version}/{domain}/favorites/{username} (PUT)                   Make a product a favorite                  X  X
api/{version}/{domain}/favorites/{username} (GET)                   Get get all favorites                      X  X
api/{version}/{domain}/favorites/{username}?productId= (DELETE)     Delete a favorite product for user         X  X






