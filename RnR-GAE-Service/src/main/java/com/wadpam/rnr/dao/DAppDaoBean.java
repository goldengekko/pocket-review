package com.wadpam.rnr.dao;

import com.google.appengine.api.NamespaceManager;
import com.google.appengine.api.datastore.Email;
import com.google.appengine.api.datastore.Key;
import com.wadpam.rnr.domain.DApp;

import java.util.Collection;

/**
 * Implementation of Business Methods related to entity DApp.
 * This (empty) class is generated by mardao, but edited by developers.
 * It is not overwritten by the generator once it exists.
 *
 * Generated on 2012-08-14T21:35:41.306+0700.
 * @author mardao DAO generator (net.sf.mardao.plugin.ProcessDomainMojo)
 */
public class DAppDaoBean 
	extends GeneratedDAppDaoImpl
		implements DAppDao 
{

    // Default constructor to enable caching by Mardao
    public DAppDaoBean() {
        this.memCacheEntity = true;
        this.memCacheAll = true;
    }

    @Override
    // Persist app in a fixed namespace
    public void persistWithFixedNamespace(DApp app) {
        // Preserve current namespace:
        final String currentNamespace = NamespaceManager.get();
        NamespaceManager.set("backoffice");
        try {
            persist(app);
        }
        finally {
            // Revert namespace
            NamespaceManager.set(currentNamespace);
        }
    }

    // Delete app from a fixed namespace
    @Override
    public void deleteWithFixedNamespace(DApp dApp) {
        // Preserve current namespace:
        final String currentNamespace = NamespaceManager.get();
        NamespaceManager.set("backoffice");

        try {
            delete(dApp);
        }
        finally {
            // Revert namespace
            NamespaceManager.set(currentNamespace);
        }
    }

    // Get app from a fixed namespace
    @Override
    public DApp findByDomainWithFixedNamespace(String domain) {
        // Preserve current namespace:
        final String currentNamespace = NamespaceManager.get();
        NamespaceManager.set("backoffice");

        DApp dApp = null;
        try {
            dApp = findByPrimaryKey(domain);
        }
        finally {
            // Revert namespace
            NamespaceManager.set(currentNamespace);
        }
        return dApp;
    }

    // Get all apps for a specific admin email address
    @Override
    public Collection<DApp> findByAdminEmail(Email email) {
        return findBy(null, false, -1, createEqualsFilter(COLUMN_NAME_APPADMINS, email));
    }



}
