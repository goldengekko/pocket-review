package com.wadpam.rnr.dao;

import com.google.appengine.api.datastore.*;
import com.wadpam.rnr.domain.DComment;
import net.sf.mardao.core.CursorPage;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;

/**
 * Implementation of Business Methods related to entity DComment.
 * This (empty) class is generated by mardao, but edited by developers.
 * It is not overwritten by the generator once it exists.
 *
 * Generated on 2012-08-05T20:54:54.772+0700.
 * @author mardao DAO generator (net.sf.mardao.plugin.ProcessDomainMojo)
 */
public class DCommentDaoBean 
	extends GeneratedDCommentDaoImpl
		implements DCommentDao 
{

    // Create datastore key
    @Override
    public Key createKey(Long id) {
        return createKey(id);
    }

    // Find root comments
    @Override
    public CursorPage<DComment, Long> queryPageRootCommentsForProductId(String productId, int limit, Serializable cursor) {
        LOG.debug(String.format("Get root comments for product:%s with with cursor:%s limit:%d", productId, cursor, limit));

         // Build a queryPage
        Query query = new Query("DComment");

        Query.Filter filter1 = new Query.FilterPredicate("productId", Query.FilterOperator.EQUAL, productId);
        Query.Filter filter2 = new Query.FilterPredicate("parentKey", Query.FilterOperator.EQUAL, null);

        query.setFilter(Query.CompositeFilterOperator.and(filter1, filter2));

        return queryPage(query, limit, cursor);
    }

    // Query and return a page of comments
    private CursorPage<DComment, Long> queryPage(Query query, Integer limit, Serializable cursor) {

        DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();

        PreparedQuery preparedQuery = datastore.prepare(query);

        // Set fetch options
        FetchOptions fetchOptions = FetchOptions.Builder.withLimit(limit);
        if (null != cursor)
            fetchOptions.startCursor(Cursor.fromWebSafeString(cursor.toString()));

        // Run the queryPage
        QueryResultList<Entity> entities = preparedQuery.asQueryResultList(fetchOptions);

        // Build the DProduct domain object from the entities
        Collection<DComment> dProducts = new ArrayList<DComment>(limit);
        for (Entity entity : entities) {
            DComment dComment = coreToDomain(entity);
            dProducts.add(dComment);
        }

        // Get a new cursor
        String newCursor = entities.getCursor().toWebSafeString();

        // Create cursor page
        CursorPage<DComment, Long> cursorPage = new CursorPage<DComment, Long>();
        cursorPage.setItems(dProducts);
        cursorPage.setCursorKey(newCursor);

        return cursorPage;
    }


    // Find all comments for a list of parent comments
    @Override
    public Collection<DComment> findCommentsWithParents(String productId, Collection<Key> parentKeys) {
        LOG.debug("Get child comments for product:{}", productId);

        // Build a queryPage
        Query query = new Query("DComment");

        Query.Filter filter1 = new Query.FilterPredicate("productId", Query.FilterOperator.EQUAL, productId);
        Query.Filter filter2 = new Query.FilterPredicate("parentKey", Query.FilterOperator.IN, parentKeys);

        query.setFilter(Query.CompositeFilterOperator.and(filter1, filter2));

        return query(query);
    }


    // Run query and return all matching comments
    private Collection<DComment> query(Query query) {
        DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();

        PreparedQuery preparedQuery = datastore.prepare(query);

        // Run the queryPage
        QueryResultList<Entity> entities = preparedQuery.asQueryResultList(null);

        // Build the DProduct domain object from the entities
        Collection<DComment> dProducts = new ArrayList<DComment>();
        for (Entity entity : entities) {
            DComment dComment = coreToDomain(entity);
            dProducts.add(dComment);
        }

        return dProducts;
    }
}
