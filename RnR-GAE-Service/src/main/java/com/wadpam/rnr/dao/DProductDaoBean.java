package com.wadpam.rnr.dao;

import com.google.appengine.api.datastore.*;
import com.wadpam.rnr.domain.DProduct;

import java.util.Collection;
import net.sf.mardao.api.dao.Expression;

/**
 * Implementation of Business Methods related to entity DProduct.
 * This (empty) class is generated by mardao, but edited by developers.
 * It is not overwritten by the generator once it exists.
 *
 * Generated on 2012-08-05T20:54:54.772+0700.
 * @author mardao DAO generator (net.sf.mardao.plugin.ProcessDomainMojo)
 */
public class DProductDaoBean 
	extends GeneratedDProductDaoImpl
		implements DProductDao 
{

    // Find most liked products
    @Override
    public Collection<DProduct> findMostLiked(int limit) {
        return findBy(COLUMN_NAME_LIKECOUNT, false, limit, 0);
    }

    // Find most commented products
    @Override
    public Collection<DProduct> findMostCommented(int limit) {
        return findBy(COLUMN_NAME_COMMENTCOUNT, false, limit, 0);
    }

    // Find most rated products
    @Override
    public Collection<DProduct> findMostRated(int limit) {
        return findBy(COLUMN_NAME_RATINGCOUNT, false, limit, 0);
    }

    // Find products with highest average rating
    @Override
    public Collection<DProduct> findTopRated(int limit) {
        return findBy(COLUMN_NAME_RATINGAVERAGE, false, limit, 0);
    }

    // Get a page of products using pagination
    // TODO: This method should be generated by Mardao and be supported by most methods
    @Override
    public String getProductPage(String cursor, int pageSize, Collection<DProduct> result) {

        DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
        Query query = new Query("DProduct");
        PreparedQuery preparedQuery = datastore.prepare(query);

        // Set fetch options
        FetchOptions fetchOptions = FetchOptions.Builder.withLimit(pageSize);
        if (null != cursor)
            fetchOptions.startCursor(Cursor.fromWebSafeString(cursor));

        // Run the query
        QueryResultList<Entity> entities = preparedQuery.asQueryResultList(fetchOptions);

        // Build the DProduct domain object from the entities
        for (Entity entity : entities) {
            DProduct dProduct = new DProduct();

            LOG.debug("Entity key name: " + entity.getKey().getName());
            dProduct.setProductId( entity.getKey().getName());
            dProduct.setRatingSum((Long)entity.getProperty("ratingSum"));
            dProduct.setRatingCount((Long)entity.getProperty("ratingCount"));
            dProduct.setLikeCount((Long)entity.getProperty("likeCount"));
            dProduct.setCommentCount((Long)entity.getProperty("commentCount"));
            dProduct.setLocation((GeoPt) entity.getProperty("location"));

            result.add(dProduct);
        }

        // Get a new cursor
        String newCursor = entities.getCursor().toWebSafeString();

        return newCursor;
    }
    
    // --- implements GeoDao ---

    @Override
    public String getGeoboxesColumnName() {
        return COLUMN_NAME_GEOBOXES;
    }

    @Override
    public Collection findGeoBase(String orderBy, boolean ascending, int limit, int offset, Expression... filters) {
        return findBy(orderBy, ascending, limit, offset, filters);
    }

    @Override
    public Collection findInGeobox(float lat, float lng, int bits, String orderBy, boolean ascending, int offset, int limit, Expression... filters) {
        throw new UnsupportedOperationException("Invoke on geoProductDao only.");
    }

    @Override
    public String save(DProduct model) {
        return update(model);
    }
}
